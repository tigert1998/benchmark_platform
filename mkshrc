# Copyright (c) 2010, 2012, 2013, 2014                                                                                  #       Thorsten Glaser <tg@mirbsd.org>
# This file is provided under the same terms as mksh.
#-
# Minimal /system/etc/mkshrc for Android
#
# Support: https://launchpad.net/mksh

PRODUCT_MODEL=`getprop ro.product.model`
if [ "$PRODUCT_MODEL" == "BLA-L29" ] || [ "$PRODUCT_MODEL" == "AOSP on hikey970" ]; then 
        GPUDIR=/sys/devices/platform/e82c0000.mali/devfreq/e82c0000.mali/subsystem/e82c0000.mali
elif [ "$PRODUCT_MODEL" == "Pixel 3 XL" ]; then
        GPUDIR=/sys/devices/platform/soc/5000000.qcom,kgsl-3d0/devfreq/5000000.qcom,kgsl-3d0
elif [ "$PRODUCT_MODEL" == "rk3399pro" ]; then
        GPUDIR=/sys/devices/platform/ff9a0000.gpu/devfreq/ff9a0000.gpu
        HOSTNAME=$PRODUCT_MODEL
elif [ "$PRODUCT_MODEL" == "MI 9" ]; then
        GPUDIR=/sys/devices/platform/soc/2c00000.qcom,kgsl-3d0/devfreq/2c00000.qcom,kgsl-3d0
fi
CPUDIR=/sys/devices/system/cpu

if (( USER_ID )); then PS1='$'; else PS1='#'; fi
export TMPDIR=/data/local/tmp
PS4='[$EPOCHREALTIME] '; PS1='${|
        local e=$?

        (( e )) && REPLY+="$e|"

        return $e
}$HOSTNAME:${PWD:-?} '"$PS1 "

if [ -t 1 ]; then
        bind ^L=clear-screen
fi

function set_bigcore_cpu_freq() {
        if [ "$#" -eq "0" ]; then
                echo "available big core cpu freq: `cat $CPUDIR/cpu4/cpufreq/scaling_available_frequencies`"
                echo "cpu freq remains unchanged"
                return 0
        fi
        echo "setting big core cpu freq to $1..."
        echo "userspace" > $CPUDIR/cpu4/cpufreq/scaling_governor
        echo "$1" > $CPUDIR/cpu4/cpufreq/scaling_min_freq
        echo "$1" > $CPUDIR/cpu4/cpufreq/scaling_max_freq
        echo "$1" > $CPUDIR/cpu4/cpufreq/scaling_setspeed
        echo "current big core cpu freq = `cat $CPUDIR/cpu4/cpufreq/cpuinfo_cur_freq`"
        return 0
}

function set_littlecore_cpu_freq() {
        if [ "$#" -eq "0" ]; then
                echo "available little core cpu freq: `cat $CPUDIR/cpu0/cpufreq/scaling_available_frequencies`"
                echo "cpu freq remains unchanged"
                return 0
        fi
        echo "setting little core cpu freq to $1..."
        echo "userspace" > $CPUDIR/cpu0/cpufreq/scaling_governor
        echo "$1" > $CPUDIR/cpu0/cpufreq/scaling_min_freq
        echo "$1" > $CPUDIR/cpu0/cpufreq/scaling_max_freq
        echo "$1" > $CPUDIR/cpu0/cpufreq/scaling_setspeed
        echo "current little core cpu freq = `cat $CPUDIR/cpu0/cpufreq/cpuinfo_cur_freq`"
        return 0
}

function set_gpu_freq() {
        if [ "$#" -eq "0" ]; then
                echo "available gpu freq: `cat $GPUDIR/available_frequencies`"
                echo "gpu freq remains unchanged"
                return 0
        fi
        echo "setting gpu freq to $1..."
        echo "userspace" > $GPUDIR/governor
        echo "$1" > $GPUDIR/min_freq
        echo "$1" > $GPUDIR/max_freq
        echo "$1" > $GPUDIR/userspace/set_freq
        echo "current gpu freq = `cat $GPUDIR/cur_freq`"
        return 0
}

function inspect_freq() {
        echo "big core cpu:"
        echo "\tfreq = `cat $CPUDIR/cpu4/cpufreq/cpuinfo_cur_freq`"
        echo "\tgovernor = `cat $CPUDIR/cpu4/cpufreq/scaling_governor`"
        echo "\tavailable freq = `cat $CPUDIR/cpu4/cpufreq/scaling_available_frequencies`"
        echo
        echo "little core cpu:"
        echo "\tfreq = `cat $CPUDIR/cpu0/cpufreq/cpuinfo_cur_freq`"
        echo "\tgovernor = `cat $CPUDIR/cpu0/cpufreq/scaling_governor`"
        echo "\tavailable freq = `cat $CPUDIR/cpu0/cpufreq/scaling_available_frequencies`"
        echo
        echo "gpu:"
        echo "\tfreq = `cat $GPUDIR/cur_freq`"
        echo "\tgovernor = `cat $GPUDIR/governor`"
        echo "\tavailable freq = `cat $GPUDIR/available_frequencies`"
        echo
        return 0
}

function push_to_max_freq() {
        set_bigcore_cpu_freq `grep -oE '[^ ]+ *$' $CPUDIR/cpu4/cpufreq/scaling_available_frequencies`
        set_littlecore_cpu_freq `grep -oE '[^ ]+ *$' $CPUDIR/cpu0/cpufreq/scaling_available_frequencies`
        set_gpu_freq `grep -oE '[^ ]+ *$' $GPUDIR/available_frequencies`
        return 0
}

function set_ondemand() {
        echo "setting governor to ondemand..."

        echo "ondemand" > $CPUDIR/cpu4/cpufreq/scaling_governor
        echo "ondemand" > $CPUDIR/cpu0/cpufreq/scaling_governor
        echo "simple_ondemand" > $GPUDIR/governor

        echo `grep -oE '^[^ ]+' $CPUDIR/cpu4/cpufreq/scaling_available_frequencies` > $CPUDIR/cpu4/cpufreq/scaling_min_freq
        echo `grep -oE '[^ ]+ *$' $CPUDIR/cpu4/cpufreq/scaling_available_frequencies` > $CPUDIR/cpu4/cpufreq/scaling_max_freq

        echo `grep -oE '^[^ ]+' $CPUDIR/cpu0/cpufreq/scaling_available_frequencies` > $CPUDIR/cpu0/cpufreq/scaling_min_freq
        echo `grep -oE '[^ ]+ *$' $CPUDIR/cpu0/cpufreq/scaling_available_frequencies` > $CPUDIR/cpu0/cpufreq/scaling_max_freq

        echo `grep -oE '^[^ ]+' $GPUDIR/available_frequencies` > $GPUDIR/min_freq
        echo `grep -oE '[^ ]+ *$' $GPUDIR/available_frequencies` > $GPUDIR/max_freq

        inspect_freq
        return 0
}