from typing import Optional
import csv
import os

from .utils import rm_ext


class CSVWriter:
    """A non-standard CSV Writer. 
    It will generate titles in the normal columns if the current title
    does not match with the former one.
    """

    def __init__(self):
        self.fd = None
        self.writer = None

        self.previous_filename = None
        self.previous_titles = None

    def _write_titles(self, titles):
        self.writer.writerow(titles)
        self.fd.flush()

    def _write_data(self, data):
        self.writer.writerow(list(map(str, data)))
        self.fd.flush()

    def _close(self):
        if self.fd is not None:
            self.fd.close()
            self.writer = None

    def update_data(self, filename, data, is_resume):
        if self.previous_filename is None:
            if is_resume:
                self.fd = open(filename, 'a')
            else:
                self.fd = open(filename, 'w')
            self.writer = csv.writer(self.fd, lineterminator='\n')

            self._write_titles(data.keys())
            self._write_data(data.values())
        elif self.previous_filename != filename:
            self._close()

            self.fd = open(filename, 'w')
            self.writer = csv.writer(self.fd, lineterminator='\n')

            self._write_titles(data.keys())
            self._write_data(data.values())
        elif self.previous_titles != data.keys():
            self._write_titles(data.keys())
            self._write_data(data.values())
        else:
            self._write_data(data.values())
        self.previous_filename = filename
        self.previous_titles = data.keys()

    def __del__(self):
        self._close()


class CSVSpliter:
    """Split the csv generated by CSVWriter.
    """
    @staticmethod
    def _is_title_row(row) -> bool:
        for i in row:
            try:
                int(i)
                return False
            except:
                ...
        return True

    @classmethod
    def split(cls, csv_path: str, output_folder: Optional[str] = None):
        if output_folder is None:
            output_folder = os.path.dirname(csv_path)

        dic = dict()  # title -> (fd, csv.writer)
        next_idx = 0
        csv_name = os.path.basename(rm_ext(csv_path))

        with open(csv_path, "r") as f:
            reader = csv.reader(f)
            for row in reader:
                key = tuple(row)
                if cls._is_title_row(row):
                    if dic.get(key) is None:
                        fd = open(
                            "{}/{}_{}.csv".format(
                                output_folder,
                                csv_name, next_idx
                            ), "w"
                        )
                        writer = csv.writer(fd, lineterminator='\n')
                        dic[key] = (fd, writer)
                        writer.writerow(row)
                        next_idx += 1
                    last_writer = dic[key][1]
                else:
                    last_writer.writerow(row)

        for _, (fd, _) in dic.items():
            fd.close()
